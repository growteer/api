// Code generated by mockery v2.52.1. DO NOT EDIT.

package profiles

import (
	context "context"

	entities "github.com/growteer/api/internal/entities"
	mock "github.com/stretchr/testify/mock"

	web3util "github.com/growteer/api/pkg/web3util"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, profile
func (_m *MockRepository) Create(ctx context.Context, profile *entities.Profile) (*entities.Profile, error) {
	ret := _m.Called(ctx, profile)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entities.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Profile) (*entities.Profile, error)); ok {
		return rf(ctx, profile)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Profile) *entities.Profile); ok {
		r0 = rf(ctx, profile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.Profile) error); ok {
		r1 = rf(ctx, profile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - profile *entities.Profile
func (_e *MockRepository_Expecter) Create(ctx interface{}, profile interface{}) *MockRepository_Create_Call {
	return &MockRepository_Create_Call{Call: _e.mock.On("Create", ctx, profile)}
}

func (_c *MockRepository_Create_Call) Run(run func(ctx context.Context, profile *entities.Profile)) *MockRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Profile))
	})
	return _c
}

func (_c *MockRepository_Create_Call) Return(_a0 *entities.Profile, _a1 error) *MockRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_Create_Call) RunAndReturn(run func(context.Context, *entities.Profile) (*entities.Profile, error)) *MockRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByDID provides a mock function with given fields: ctx, did
func (_m *MockRepository) GetByDID(ctx context.Context, did *web3util.DID) (*entities.Profile, error) {
	ret := _m.Called(ctx, did)

	if len(ret) == 0 {
		panic("no return value specified for GetByDID")
	}

	var r0 *entities.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *web3util.DID) (*entities.Profile, error)); ok {
		return rf(ctx, did)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *web3util.DID) *entities.Profile); ok {
		r0 = rf(ctx, did)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *web3util.DID) error); ok {
		r1 = rf(ctx, did)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetByDID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByDID'
type MockRepository_GetByDID_Call struct {
	*mock.Call
}

// GetByDID is a helper method to define mock.On call
//   - ctx context.Context
//   - did *web3util.DID
func (_e *MockRepository_Expecter) GetByDID(ctx interface{}, did interface{}) *MockRepository_GetByDID_Call {
	return &MockRepository_GetByDID_Call{Call: _e.mock.On("GetByDID", ctx, did)}
}

func (_c *MockRepository_GetByDID_Call) Run(run func(ctx context.Context, did *web3util.DID)) *MockRepository_GetByDID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*web3util.DID))
	})
	return _c
}

func (_c *MockRepository_GetByDID_Call) Return(_a0 *entities.Profile, _a1 error) *MockRepository_GetByDID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetByDID_Call) RunAndReturn(run func(context.Context, *web3util.DID) (*entities.Profile, error)) *MockRepository_GetByDID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, profile
func (_m *MockRepository) Update(ctx context.Context, profile *entities.Profile) (*entities.Profile, error) {
	ret := _m.Called(ctx, profile)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entities.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Profile) (*entities.Profile, error)); ok {
		return rf(ctx, profile)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Profile) *entities.Profile); ok {
		r0 = rf(ctx, profile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.Profile) error); ok {
		r1 = rf(ctx, profile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - profile *entities.Profile
func (_e *MockRepository_Expecter) Update(ctx interface{}, profile interface{}) *MockRepository_Update_Call {
	return &MockRepository_Update_Call{Call: _e.mock.On("Update", ctx, profile)}
}

func (_c *MockRepository_Update_Call) Run(run func(ctx context.Context, profile *entities.Profile)) *MockRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Profile))
	})
	return _c
}

func (_c *MockRepository_Update_Call) Return(_a0 *entities.Profile, _a1 error) *MockRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_Update_Call) RunAndReturn(run func(context.Context, *entities.Profile) (*entities.Profile, error)) *MockRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
