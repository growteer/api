// Code generated by mockery v2.52.1. DO NOT EDIT.

package authn

import (
	context "context"

	web3util "github.com/growteer/api/pkg/web3util"
	mock "github.com/stretchr/testify/mock"
)

// MockAuthnRepository is an autogenerated mock type for the AuthnRepository type
type MockAuthnRepository struct {
	mock.Mock
}

type MockAuthnRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthnRepository) EXPECT() *MockAuthnRepository_Expecter {
	return &MockAuthnRepository_Expecter{mock: &_m.Mock}
}

// GetNonceByDID provides a mock function with given fields: ctx, did
func (_m *MockAuthnRepository) GetNonceByDID(ctx context.Context, did *web3util.DID) (string, error) {
	ret := _m.Called(ctx, did)

	if len(ret) == 0 {
		panic("no return value specified for GetNonceByDID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *web3util.DID) (string, error)); ok {
		return rf(ctx, did)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *web3util.DID) string); ok {
		r0 = rf(ctx, did)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *web3util.DID) error); ok {
		r1 = rf(ctx, did)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthnRepository_GetNonceByDID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNonceByDID'
type MockAuthnRepository_GetNonceByDID_Call struct {
	*mock.Call
}

// GetNonceByDID is a helper method to define mock.On call
//   - ctx context.Context
//   - did *web3util.DID
func (_e *MockAuthnRepository_Expecter) GetNonceByDID(ctx interface{}, did interface{}) *MockAuthnRepository_GetNonceByDID_Call {
	return &MockAuthnRepository_GetNonceByDID_Call{Call: _e.mock.On("GetNonceByDID", ctx, did)}
}

func (_c *MockAuthnRepository_GetNonceByDID_Call) Run(run func(ctx context.Context, did *web3util.DID)) *MockAuthnRepository_GetNonceByDID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*web3util.DID))
	})
	return _c
}

func (_c *MockAuthnRepository_GetNonceByDID_Call) Return(_a0 string, _a1 error) *MockAuthnRepository_GetNonceByDID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthnRepository_GetNonceByDID_Call) RunAndReturn(run func(context.Context, *web3util.DID) (string, error)) *MockAuthnRepository_GetNonceByDID_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefreshTokenByDID provides a mock function with given fields: ctx, did
func (_m *MockAuthnRepository) GetRefreshTokenByDID(ctx context.Context, did *web3util.DID) (string, error) {
	ret := _m.Called(ctx, did)

	if len(ret) == 0 {
		panic("no return value specified for GetRefreshTokenByDID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *web3util.DID) (string, error)); ok {
		return rf(ctx, did)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *web3util.DID) string); ok {
		r0 = rf(ctx, did)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *web3util.DID) error); ok {
		r1 = rf(ctx, did)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthnRepository_GetRefreshTokenByDID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefreshTokenByDID'
type MockAuthnRepository_GetRefreshTokenByDID_Call struct {
	*mock.Call
}

// GetRefreshTokenByDID is a helper method to define mock.On call
//   - ctx context.Context
//   - did *web3util.DID
func (_e *MockAuthnRepository_Expecter) GetRefreshTokenByDID(ctx interface{}, did interface{}) *MockAuthnRepository_GetRefreshTokenByDID_Call {
	return &MockAuthnRepository_GetRefreshTokenByDID_Call{Call: _e.mock.On("GetRefreshTokenByDID", ctx, did)}
}

func (_c *MockAuthnRepository_GetRefreshTokenByDID_Call) Run(run func(ctx context.Context, did *web3util.DID)) *MockAuthnRepository_GetRefreshTokenByDID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*web3util.DID))
	})
	return _c
}

func (_c *MockAuthnRepository_GetRefreshTokenByDID_Call) Return(_a0 string, _a1 error) *MockAuthnRepository_GetRefreshTokenByDID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthnRepository_GetRefreshTokenByDID_Call) RunAndReturn(run func(context.Context, *web3util.DID) (string, error)) *MockAuthnRepository_GetRefreshTokenByDID_Call {
	_c.Call.Return(run)
	return _c
}

// SaveNonce provides a mock function with given fields: ctx, did, nonce
func (_m *MockAuthnRepository) SaveNonce(ctx context.Context, did *web3util.DID, nonce string) error {
	ret := _m.Called(ctx, did, nonce)

	if len(ret) == 0 {
		panic("no return value specified for SaveNonce")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *web3util.DID, string) error); ok {
		r0 = rf(ctx, did, nonce)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthnRepository_SaveNonce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveNonce'
type MockAuthnRepository_SaveNonce_Call struct {
	*mock.Call
}

// SaveNonce is a helper method to define mock.On call
//   - ctx context.Context
//   - did *web3util.DID
//   - nonce string
func (_e *MockAuthnRepository_Expecter) SaveNonce(ctx interface{}, did interface{}, nonce interface{}) *MockAuthnRepository_SaveNonce_Call {
	return &MockAuthnRepository_SaveNonce_Call{Call: _e.mock.On("SaveNonce", ctx, did, nonce)}
}

func (_c *MockAuthnRepository_SaveNonce_Call) Run(run func(ctx context.Context, did *web3util.DID, nonce string)) *MockAuthnRepository_SaveNonce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*web3util.DID), args[2].(string))
	})
	return _c
}

func (_c *MockAuthnRepository_SaveNonce_Call) Return(_a0 error) *MockAuthnRepository_SaveNonce_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthnRepository_SaveNonce_Call) RunAndReturn(run func(context.Context, *web3util.DID, string) error) *MockAuthnRepository_SaveNonce_Call {
	_c.Call.Return(run)
	return _c
}

// SaveRefreshToken provides a mock function with given fields: ctx, did, token
func (_m *MockAuthnRepository) SaveRefreshToken(ctx context.Context, did *web3util.DID, token string) error {
	ret := _m.Called(ctx, did, token)

	if len(ret) == 0 {
		panic("no return value specified for SaveRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *web3util.DID, string) error); ok {
		r0 = rf(ctx, did, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthnRepository_SaveRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveRefreshToken'
type MockAuthnRepository_SaveRefreshToken_Call struct {
	*mock.Call
}

// SaveRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - did *web3util.DID
//   - token string
func (_e *MockAuthnRepository_Expecter) SaveRefreshToken(ctx interface{}, did interface{}, token interface{}) *MockAuthnRepository_SaveRefreshToken_Call {
	return &MockAuthnRepository_SaveRefreshToken_Call{Call: _e.mock.On("SaveRefreshToken", ctx, did, token)}
}

func (_c *MockAuthnRepository_SaveRefreshToken_Call) Run(run func(ctx context.Context, did *web3util.DID, token string)) *MockAuthnRepository_SaveRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*web3util.DID), args[2].(string))
	})
	return _c
}

func (_c *MockAuthnRepository_SaveRefreshToken_Call) Return(_a0 error) *MockAuthnRepository_SaveRefreshToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthnRepository_SaveRefreshToken_Call) RunAndReturn(run func(context.Context, *web3util.DID, string) error) *MockAuthnRepository_SaveRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthnRepository creates a new instance of MockAuthnRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthnRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthnRepository {
	mock := &MockAuthnRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
