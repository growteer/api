// Code generated by mockery v2.52.1. DO NOT EDIT.

package authn

import (
	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"

	web3util "github.com/growteer/api/pkg/web3util"
)

// MockTokenProvider is an autogenerated mock type for the TokenProvider type
type MockTokenProvider struct {
	mock.Mock
}

type MockTokenProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenProvider) EXPECT() *MockTokenProvider_Expecter {
	return &MockTokenProvider_Expecter{mock: &_m.Mock}
}

// NewRefreshToken provides a mock function with given fields: did
func (_m *MockTokenProvider) NewRefreshToken(did *web3util.DID) (string, error) {
	ret := _m.Called(did)

	if len(ret) == 0 {
		panic("no return value specified for NewRefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*web3util.DID) (string, error)); ok {
		return rf(did)
	}
	if rf, ok := ret.Get(0).(func(*web3util.DID) string); ok {
		r0 = rf(did)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*web3util.DID) error); ok {
		r1 = rf(did)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenProvider_NewRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewRefreshToken'
type MockTokenProvider_NewRefreshToken_Call struct {
	*mock.Call
}

// NewRefreshToken is a helper method to define mock.On call
//   - did *web3util.DID
func (_e *MockTokenProvider_Expecter) NewRefreshToken(did interface{}) *MockTokenProvider_NewRefreshToken_Call {
	return &MockTokenProvider_NewRefreshToken_Call{Call: _e.mock.On("NewRefreshToken", did)}
}

func (_c *MockTokenProvider_NewRefreshToken_Call) Run(run func(did *web3util.DID)) *MockTokenProvider_NewRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*web3util.DID))
	})
	return _c
}

func (_c *MockTokenProvider_NewRefreshToken_Call) Return(_a0 string, _a1 error) *MockTokenProvider_NewRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenProvider_NewRefreshToken_Call) RunAndReturn(run func(*web3util.DID) (string, error)) *MockTokenProvider_NewRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewSessionToken provides a mock function with given fields: did
func (_m *MockTokenProvider) NewSessionToken(did *web3util.DID) (string, error) {
	ret := _m.Called(did)

	if len(ret) == 0 {
		panic("no return value specified for NewSessionToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*web3util.DID) (string, error)); ok {
		return rf(did)
	}
	if rf, ok := ret.Get(0).(func(*web3util.DID) string); ok {
		r0 = rf(did)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*web3util.DID) error); ok {
		r1 = rf(did)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenProvider_NewSessionToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewSessionToken'
type MockTokenProvider_NewSessionToken_Call struct {
	*mock.Call
}

// NewSessionToken is a helper method to define mock.On call
//   - did *web3util.DID
func (_e *MockTokenProvider_Expecter) NewSessionToken(did interface{}) *MockTokenProvider_NewSessionToken_Call {
	return &MockTokenProvider_NewSessionToken_Call{Call: _e.mock.On("NewSessionToken", did)}
}

func (_c *MockTokenProvider_NewSessionToken_Call) Run(run func(did *web3util.DID)) *MockTokenProvider_NewSessionToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*web3util.DID))
	})
	return _c
}

func (_c *MockTokenProvider_NewSessionToken_Call) Return(_a0 string, _a1 error) *MockTokenProvider_NewSessionToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenProvider_NewSessionToken_Call) RunAndReturn(run func(*web3util.DID) (string, error)) *MockTokenProvider_NewSessionToken_Call {
	_c.Call.Return(run)
	return _c
}

// ParseRefreshToken provides a mock function with given fields: token
func (_m *MockTokenProvider) ParseRefreshToken(token string) (*jwt.RegisteredClaims, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ParseRefreshToken")
	}

	var r0 *jwt.RegisteredClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*jwt.RegisteredClaims, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt.RegisteredClaims); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.RegisteredClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenProvider_ParseRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseRefreshToken'
type MockTokenProvider_ParseRefreshToken_Call struct {
	*mock.Call
}

// ParseRefreshToken is a helper method to define mock.On call
//   - token string
func (_e *MockTokenProvider_Expecter) ParseRefreshToken(token interface{}) *MockTokenProvider_ParseRefreshToken_Call {
	return &MockTokenProvider_ParseRefreshToken_Call{Call: _e.mock.On("ParseRefreshToken", token)}
}

func (_c *MockTokenProvider_ParseRefreshToken_Call) Run(run func(token string)) *MockTokenProvider_ParseRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTokenProvider_ParseRefreshToken_Call) Return(claims *jwt.RegisteredClaims, err error) *MockTokenProvider_ParseRefreshToken_Call {
	_c.Call.Return(claims, err)
	return _c
}

func (_c *MockTokenProvider_ParseRefreshToken_Call) RunAndReturn(run func(string) (*jwt.RegisteredClaims, error)) *MockTokenProvider_ParseRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// ParseSessionToken provides a mock function with given fields: token
func (_m *MockTokenProvider) ParseSessionToken(token string) (*jwt.RegisteredClaims, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ParseSessionToken")
	}

	var r0 *jwt.RegisteredClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*jwt.RegisteredClaims, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt.RegisteredClaims); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.RegisteredClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenProvider_ParseSessionToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseSessionToken'
type MockTokenProvider_ParseSessionToken_Call struct {
	*mock.Call
}

// ParseSessionToken is a helper method to define mock.On call
//   - token string
func (_e *MockTokenProvider_Expecter) ParseSessionToken(token interface{}) *MockTokenProvider_ParseSessionToken_Call {
	return &MockTokenProvider_ParseSessionToken_Call{Call: _e.mock.On("ParseSessionToken", token)}
}

func (_c *MockTokenProvider_ParseSessionToken_Call) Run(run func(token string)) *MockTokenProvider_ParseSessionToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTokenProvider_ParseSessionToken_Call) Return(_a0 *jwt.RegisteredClaims, _a1 error) *MockTokenProvider_ParseSessionToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenProvider_ParseSessionToken_Call) RunAndReturn(run func(string) (*jwt.RegisteredClaims, error)) *MockTokenProvider_ParseSessionToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokenProvider creates a new instance of MockTokenProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenProvider {
	mock := &MockTokenProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
